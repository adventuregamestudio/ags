//=============================================================================
//
// Adventure Game Studio (AGS)
//
// Copyright (C) 1999-2011 Chris Jones and 2011-2025 various contributors
// The full list of copyright holders can be found in the Copyright.txt
// file, which is part of this source code distribution.
//
// The AGS source code is provided under the Artistic License 2.0.
// A copy of this license can be found in the file License.txt and at
// https://opensource.org/license/artistic-2-0/
//
//=============================================================================
#include <vector>
#include "ninja_writer.h"
#include "data/agfreader.h"
#include "generator_common.h"

using namespace AGS;
using namespace AGS::Common;
using namespace WriterUtils;

namespace NinjaGenerator {

// Generate Ninja Build Script for AGS games
void GenerateNinjaBuild(const GeneratorOptions& opt) {
    // TO-DO: move the OutputFileWriter from here, see note in Makefile generator
   // std::unique_ptr<OutputWriterInterface> outfile(new OutputFileWriter());

    // this move is causing a delete, so need to do this in some other way!!!!
    NinjaWriter writer(opt.OutputFile);

    const std::vector<String> crm_list = opt.RoomFileList;
    const std::vector<String> headers_list = opt.HeaderFileList;
    const std::vector<String> scripts_list = opt.ScriptFileList;
    const std::vector<String> trs_files = opt.TrsFileList;

    writer.Comment("Ninja build for AGS GAME");
    // Variables
    writer.Variable("AGSCC", opt.ToolAgscc);
    writer.Variable("AGFEXPORT", opt.ToolAgfexport);
    writer.Variable("AGF2DLASC", opt.ToolAgf2dlgasc);
    writer.Variable("TRAC", opt.ToolTrac);
    writer.Variable("AGSPAK", opt.ToolAgspak);
    writer.Variable("CRM2ASH", opt.ToolCrm2ash);
    writer.Variable("GAME_PROJECT_DIR", opt.GameProjectDir);
    writer.Variable("GAME_PROJECT", opt.GameProjectFile);
    writer.Variable("OUTPUT_DIR", opt.OutputDir);
    writer.Variable("TEMP_DIR", opt.TempDir);
    writer.Variable("AGSDEFNS_FILE", opt.AgsDefnsFile);

    // Rules
    writer.Rule("agf2autoash", "$AGFEXPORT autoash $in $out");
    writer.Rule("agf2glvar", "$AGFEXPORT glvar $in $out1 $out2");
    writer.Rule("agf2dlgasc", "$AGF2DLASC $in $out");
    writer.Rule("agscc", "$AGSCC $in $out -H $headers");
    writer.Rule("trac", "$TRAC $in $out");
    writer.Rule("agspak", "$AGSPAK $in $out");

    // Build statements
    // Generate auto-generated script headers from Game.agf
    writer.Build({"$TEMP_DIR/_AutoGenerated.ash"}, "agf2autoash", {"$GAME_PROJECT_FILE"});
    writer.Build({"$TEMP_DIR/_GlobalVariables.ash", "$TEMP_DIR/_GlobalVariables.asc"}, "agf2glvar", {"$GAME_PROJECT_FILE"});
    writer.Build({"$TEMP_DIR/DialogScript.asc"}, "agf2dlgasc", {"$GAME_PROJECT_FILE"});

    // Compile script modules
    std::vector<String> headers_base {"AGSDEFNS_FILE","$TEMP_DIR/_AutoGenerated.ash","$TEMP_DIR/_GlobalVariables.ash"};

    for (int i=0; i<scripts_list.size(); i++) {
        const auto& script = scripts_list[i];

        String scriptname = script.Left(script.GetLength() - 4); // Strip extension
        String asc = String::FromFormat("$GAME_PROJECT_DIR/%s", script.GetCStr());
        String out = String::FromFormat("$TEMP_DIR/%s.o", scriptname.GetCStr());

        std::vector<String> this_script_headers(headers_base);
        this_script_headers.insert(this_script_headers.end(), headers_list.begin(), headers_list.begin() + i);
        String headers = Join(":", this_script_headers);

        writer.Build({out}, "agscc", {asc}, this_script_headers, {}, {{"headers", headers}});
    }

    // Compile dialog script
    if(opt.HasDialogScripts)
    {
        String asc = "$TEMP_DIR/DialogScript.asc";
        String out = "$TEMP_DIR/DialogScript.o";

        std::vector<String> this_script_headers(headers_base);
        this_script_headers.insert(this_script_headers.end(), headers_list.begin(), headers_list.end());
        String headers = Join(":", this_script_headers);

        writer.Build({out}, "agscc", {asc}, this_script_headers, {}, {{"headers", headers}});
    }

    // Handle rooms
    for (const auto& crm : crm_list) {
        String room = crm.Left(crm.GetLength() - 4); // Strip ".crm" extension
        String room_header = String::FromFormat("%s.ash", room.GetCStr());
        String room_crm_file = String::FromFormat("$GAME_PROJECT_DIR/%s", crm.GetCStr());

        writer.Build({room_header}, "crm2ash", {room_crm_file});
        // need to somehow build the room scripts here
        // this uses agscc for the scripts, so should be similar to above build
        // but then need to patch the room crm file to get the updated room script binary into it
    }

    // Generate TRA files from TRS files using trac.exe
    for (const auto& trs : trs_files) {
        String tra = trs.Left(trs.GetLength() - 4); // Strip ".trs" extension
        writer.Build({String::FromFormat("$TEMP_DIR/%s.tra", tra.GetCStr())}, "trac", {trs});
    }

    // Here is a step where it builds the game28.dta file
    // How does it does it? Idnk, we don't have this tool yet
    // Need to come up with a hacked tool for now
    // I think all script modules are patched into it

    // Package the game files using agspak.exe
    // have no idea how to actually do this, need a list of files somewhere or a dir where I will throw everything
    // TO-DO: figure how to do this
    // writer.Build({"game.ags"}, "agspak", {"temp/game28.dta", "temp/acsprset.spr", "temp/sprindex.dat", /* Other files??? */});

    // Package the audio and speech files
    // TO-DO: figure if we need to build these at all, but how??
    // writer.Build({"audio.vox"}, "agspak", {"AudioCache/*"}); // Assumes all audio files are in AudioCache
    // writer.Build({"speech.vox"}, "agspak", {"Speech/*"}); // Assumes all speech files are in Speech directory

    writer.Close(); // TO-DO: refactor to not need this
}

} // namespace NinjaGenerator
