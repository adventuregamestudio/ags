using AGS.Types.Enums;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text;
using System.Xml;

namespace AGS.Types
{
    public class DebugLog : ICustomTypeDescriptor
    {
        LogLevel _loglevel_main = LogLevel.Error;
        LogLevel _loglevel_game = LogLevel.Error;
        LogLevel _loglevel_script = LogLevel.Info;
        LogLevel _loglevel_sprcache = LogLevel.None;
        LogLevel _loglevel_manobj = LogLevel.None;
        LogLevel _loglevel_sdl = LogLevel.None;

        LogLevel _logfilter_main = LogLevel.Error;
        LogLevel _logfilter_game = LogLevel.Error;
        LogLevel _logfilter_script = LogLevel.Info;
        LogLevel _logfilter_sprcache = LogLevel.None;
        LogLevel _logfilter_manobj = LogLevel.None;
        LogLevel _logfilter_sdl = LogLevel.None;

        public void SetDefaults()
        {
            _loglevel_main = LogLevel.Error;
            _loglevel_game = LogLevel.Error;
            _loglevel_script = LogLevel.Info;
            _loglevel_sprcache = LogLevel.None;
            _loglevel_manobj = LogLevel.None;
            _loglevel_sdl = LogLevel.None;

            _logfilter_main = LogLevel.Error;
            _logfilter_game = LogLevel.Error;
            _logfilter_script = LogLevel.Info;
            _logfilter_sprcache = LogLevel.None;
            _logfilter_manobj = LogLevel.None;
            _logfilter_sdl = LogLevel.None;
        }

        // Main log group
        [DisplayName("Main")]
        [Description("Define the log level of Main engine, which gives information on general ags behavior. A higher log level may show more information but may be more taxing to the engine.")]
        [Category("Log Level")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LL_Main
        {
            get { return _loglevel_main; }
            set { _loglevel_main = value;
            }
        }

        [DisplayName("Main")]
        [Description("Changes the dynamic filter, used only for showing in the log panel. This doesn't affect logging performance, but may be useful for dynamically finding log messages.")]
        [Category("Dynamic Filter")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LF_Main
        {
            get { return _logfilter_main; }
            set { _logfilter_main = value;
            }
        }


        // Game log group
        [DisplayName("Game")]
        [Description("Define the log level of game related methods, which gives information on internal Engine API and behavior. A higher log level may show more information but may be more taxing to the engine.")]
        [Category("Log Level")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LL_Game
        {
            get { return _loglevel_game; }
            set { _loglevel_game = value;
            }
        }

        [DisplayName("Game")]
        [Description("Changes the dynamic filter, used only for showing in the log panel. This doesn't affect logging performance, but may be useful for dynamically finding log messages.")]
        [Category("Dynamic Filter")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LF_Game
        {
            get { return _logfilter_game; }
            set { _logfilter_game = value;
            }
        }


        // Script log group
        [DisplayName("Script")]
        [Description("Define the log level of messages generated by user script, using System.Log method. A higher log level may show more information but may be more taxing to the engine.")]
        [Category("Log Level")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LL_Script
        {
            get { return _loglevel_script; }
            set { _loglevel_script = value;
            }
        }

        [DisplayName("Script")]
        [Description("Changes the dynamic filter, used only for showing in the log panel. This doesn't affect logging performance, but may be useful for dynamically finding log messages.")]
        [Category("Dynamic Filter")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LF_Script
        {
            get { return _logfilter_script; }
            set { _logfilter_script = value;
            }
        }


        // Sprite Cache log group
        [DisplayName("Sprite Cache")]
        [Browsable(false)]
        [Description("Define the log level of messages generated by sprite cache messages. A higher log level may show more information but may be more taxing to the engine.")]
        [Category("Log Level")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LL_SpriteCache
        {
            get { return _loglevel_sprcache; }
        }

        [DisplayName("Sprite Cache")]
        [Browsable(false)]
        [Description("Changes the dynamic filter, used only for showing in the log panel. This doesn't affect logging performance, but may be useful for dynamically finding log messages.")]
        [Category("Dynamic Filter")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LF_SpriteCache
        {
            get { return _logfilter_sprcache; }
        }


        // Managed Objects log group
        [DisplayName("Managed Objects")]
        [Browsable(false)]
        [Description("Define the log level of messages generated by managed objects. A higher log level may show more information but may be more taxing to the engine.")]
        [Category("Log Level")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LL_ManObj
        {
            get { return _loglevel_manobj; }
        }

        [DisplayName("Managed Objects")]
        [Browsable(false)]
        [Description("Changes the dynamic filter, used only for showing in the log panel. This doesn't affect logging performance, but may be useful for dynamically finding log messages.")]
        [Category("Dynamic Filter")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LF_ManObj
        {
            get { return _logfilter_manobj; }
        }


        // SDL log group
        [DisplayName("SDL")]
        [Browsable(false)]
        [Description("Define the log level of messages generated by SDL backend. A higher log level may show more information but may be more taxing to the engine.")]
        [Category("Log Level")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LL_SDL
        {
            get { return _loglevel_sdl; }
        }

        [DisplayName("SDL")]
        [Browsable(false)]
        [Description("Changes the dynamic filter, used only for showing in the log panel. This doesn't affect logging performance, but may be useful for dynamically finding log messages.")]
        [Category("Dynamic Filter")]
        [TypeConverter(typeof(EnumTypeConverter))]
        public LogLevel LF_SDL
        {
            get { return _logfilter_sdl; }
        }

        public LogLevel GetGroupLogLevel(LogGroup group)
        {
            switch (group)
            {
                case LogGroup.Main:
                    return _loglevel_main;
                case LogGroup.Game:
                    return _loglevel_game;
                case LogGroup.Script:
                    return _loglevel_script;
                case LogGroup.SprCache:
                    return _loglevel_sprcache;
                case LogGroup.ManObj:
                    return _loglevel_manobj;
                case LogGroup.SDL:
                    return _loglevel_sdl;
            }
            return LogLevel.None;
        }

        public LogLevel GetGroupLogFilter(LogGroup group)
        {
            switch (group)
            {
                case LogGroup.Main:
                    return _logfilter_main;
                case LogGroup.Game:
                    return _logfilter_game;
                case LogGroup.Script:
                    return _logfilter_script;
                case LogGroup.SprCache:
                    return _logfilter_sprcache;
                case LogGroup.ManObj:
                    return _logfilter_manobj;
                case LogGroup.SDL:
                    return _logfilter_sdl;
            }
            return LogLevel.None;
        }

        public void FromXml(XmlNode node)
        {
            SerializeUtils.DeserializeFromXML(this, node);
        }

        public void ToXml(XmlTextWriter writer)
        {
            SerializeUtils.SerializeToXML(this, writer);
        }

        #region ICustomTypeDescriptor Members
        public AttributeCollection GetAttributes()
        {
            return TypeDescriptor.GetAttributes(this, true);
        }

        public string GetClassName()
        {
            return TypeDescriptor.GetClassName(this, true);
        }

        public string GetComponentName()
        {
            return TypeDescriptor.GetComponentName(this, true);
        }

        public TypeConverter GetConverter()
        {
            return TypeDescriptor.GetConverter(this, true);
        }

        public EventDescriptor GetDefaultEvent()
        {
            return TypeDescriptor.GetDefaultEvent(this, true);
        }

        public PropertyDescriptor GetDefaultProperty()
        {
            return TypeDescriptor.GetDefaultProperty(this, true);
        }

        public object GetEditor(Type editorBaseType)
        {
            return TypeDescriptor.GetEditor(this, editorBaseType, true);
        }

        public EventDescriptorCollection GetEvents()
        {
            return TypeDescriptor.GetEvents(this, true);
        }

        public EventDescriptorCollection GetEvents(Attribute[] attributes)
        {
            return TypeDescriptor.GetEvents(this, attributes, true);
        }

        public PropertyDescriptorCollection GetProperties()
        {
            return TypeDescriptor.GetProperties(this, true);
        }

        public PropertyDescriptorCollection GetProperties(Attribute[] attributes)
        {
            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(this, attributes, true);
            List<PropertyDescriptor> wantedProperties = new List<PropertyDescriptor>();
            foreach (PropertyDescriptor property in properties)
            {
                // filter properties here if needed

                wantedProperties.Add(property);
            }
            return new PropertyDescriptorCollection(wantedProperties.ToArray());
        }

        public object GetPropertyOwner(PropertyDescriptor pd)
        {
            return this;
        }
        #endregion
    }
}
